:tocdepth: 3 

.. _doc:

Documentation System
====================

With Icepack development, corresponding updates or modification to the Icepack
documentation are required. Whenever you modify the model you should update
documentation. Icepack uses Sphinx to create online HTML documentation.

FAQs
----

1) What are Sphinx and reStructuredText (RST)?

   The CICE and Icepack documentation is written using reStructuredText (RST) markup language. 
   ReStructuredText is a markup language, like HTML, markdown or LaTeX. Sphinx is a python tool 
   for publishing RST documents in other formats such as HTML and PDF. Additional information 
   about using RST and Sphinx are found in the sections below.

2) What is expected of *me* when changing the documentation?

   We expect that if you need to add or modify documentation that you will be able to modify the 
   RST source files and generate HTML using Sphinx in order to review the HTML documentation. We 
   will review the RST and HTML during a Pull Request to verify it is working properly and is consistent 
   with the rest of the CICE-Consortium documentation format.

   We do not expect you to generate a PDF of your documentation changes and include this as part of a 
   Pull Request. Updated PDF documentation will be generated for each new release. The online HTML 
   documentation, however, will be updated regularly with regular code development workflow. 

3) Where are the documentation files kept?

   A PDF of the latest release documentation is available in the master branch at /doc/Icepack-v*.pdf. 
   This document is generated by the CICE-Consortium team and will be updated with releases. The HTML 
   on the website is kept up to date with the developing code, and is therefore updated more often than the PDF.

   The RST source files for generating html are stored in the master branch of the repository under /doc/source/. 

   On your local fork, when you modify RST and use it to generate HTML, the HTML files are created in the
    /doc/build/html/ directory and can be opened locally for review as you modify the documentation.

   For the CICE Consortium, the tested and vetted HTML pages brought in through successful Pull Requests are 
   stored in the gh-pages branch of the repository and accessible from the URL to the linked, searchable 
   User's Guide on in the README.md file at the top level of the Icepack repository or on the main wiki page 
   for Icepack (https://github.com/CICE-Consortium/Icepack/wiki). Note that gh-pages is an orphan 
   branch (see below for details) of the repository and has *only* the Sphinx generated HTML documentation 
   and nothing else. 


Steps for Modifying Documentation
---------------------------------

Installing Sphinx
~~~~~~~~~~~~~~~~~~

This must be done once on each platform. See `Sphinx <http://www.sphinx-doc.org/en/stable/>`_ or 
`Installing Sphinx <http://www.sphinx-doc.org/en/stable/install.html>`_ for details. Below are the
commands for installing Sphinx on a mac laptop at the command line. 
Other platforms may require other steps. ::

   $ sudo pip install --ignore-installed sphinx
   $ sudo pip install --ignore-installed sphinxcontrib-bibtex

The CICE Consortium uses the following software to get successful Sphinx HTML builds, including linked
references:

* python 2.7.11

* Sphinx (1.6.3)

* sphinx-rtd-theme (0.1.9)

* sphinxcontrib-bibtex (0.3.5)

* sphinxcontrib-websupport (1.0.1)

You will need to use the CICE Consortium's conf.py file, which is found under /doc/source/conf.py in the repository
in order to build the Sphinx documentation.

To use linked references within the HTML you will need to have the sphinxcontrib-bibtex package as well as the zreferences.rst and master_list.bib files located in /doc/source/ in the master repository. The list of references in master_list.bib is currently ordered sequentially from oldest to newest and alphabetically within a given year. To add references for your documentation, edit the master_list.bib file using the Articles and Books as examples for your addition(s). Please follow the format for ordering the date/alphabetization as well as including a URL with the document's DOI.

Model sandbox and documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Follow the general `CICE-Consortium Git Workflow and Developer's guide <https://docs.google.com/document/d/1rR6WAvZQT9iAMUp-m_HZ06AUCCI19mguFialsMCYs9o/edit#heading=h.ugpwrwa68ov1>`_
to clone the repository and create your personal fork for model modifications. Whenever you modify the model 
you should update documentation. You can update the documentation on the same branch of your fork on which 
you test code, or you can create a separate branch called documentation to test only the RST and HTML documentation.

Editing RST files
~~~~~~~~~~~~~~~~~~

Open the RST file using a text editor and make the changes necessary. Note that from the User's Guide documentation (see link above) there is a hyperlink called "Show Source" on the left hand column that will show you the RST source code for the HTML you are viewing. This is a good way to see the syntax for tables, equations, linking references, labeling tables or figures, and correctly identifying documentation sections or subsections.

Here are some resources for using RST files:

* `RST Primer1 <http://www.sphinx-doc.org/en/stable/rest.html>`_

* `RST Primer2 <http://docutils.sourceforge.net/docs/user/rst/quickstart.html>`_

* `RST Syntax <https://wiki.typo3.org/ReST_Syntax>`_

* `RST tables <http://www.sphinx-doc.org/en/stable/rest.html#tables>`_ - Note that tables can be tricky in Sphinx and we prefer using `comma separated tables <http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table>`_ whenever possible. 


Building HTML
~~~~~~~~~~~~~~

Move into the /doc/ directory of your sandbox. Then execute the following command::

   $ make clean 

to get rid of old HTML files. Then execute::

   $ make html

to build HTML into /build/html/ directory. It will also give you errors if there is a problem with the build that will help you figure out how you need to modify your RST files for a successful HTML build. Finally ::

   $ open /build/html/FILE.html 

Open the HTML on your browser for testing.


Push changes back to the repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you're happy with the HTML you've generated, follow the standard CICE-Consortium 
`Git Workflow and Developer's guide <https://docs.google.com/document/d/1rR6WAvZQT9iAMUp-m_HZ06AUCCI19mguFialsMCYs9o/edit#heading=h.ugpwrwa68ov1>`_ 
to do a Pull Request and make sure to note in the Pull Request Template that documentation has also 
been updated. We will take care of testing and adding changed HTML to the gh-pages orphan branch.

Other Tips and Tricks
---------------------

Converting LaTeX to RST
~~~~~~~~~~~~~~~~~~~~~~~

If you start from a LaTeX (``*.tex``) document you will need to convert this to the RST format that Sphinx 
requires. A handy tool to do this is `Pandoc <http://pandoc.org/getting-started.html>`_, which you 
can install quickly and run from the command line.

Once Pandoc is installed, the basic command line syntax to convert a file is ::

     $ pandoc NAMEIN.tex -f latex -t rst -s -ou NAMEOUT.rst

The NAMEOUT.rst file can be directly edited for Sphinx. Pandoc does a beautiful job of converting the text, 
equations, and many tables. However, equation numbering, section linking, references, figures, and some 
tables required more hands on care to be sure they render correctly. 

Pandoc requires that the ``*.tex`` files be in utf-8 encoding. To easily do this open the ``*.tex``
document in Emacs then do ``ctrl-x ctrl-m f`` and you will be prompted to enter encoding type. Just
type in ``utf-8`` and hit enter. Then save with ``ctrl-x ctrl-s`` . You are done and the document can be
converted with Pandoc.

Converting RST to PDF
~~~~~~~~~~~~~~~~~~~~~

Generating a PDF is more complex and currently requires a two-step process. The generation will require 
recent versions of both LaTeX and Sphinx. From the /doc/ directory do the following::

     $ make latex
     $ cd build/latex
     $ make

Then search for the ``*.pdf`` document created.

Creating an orphan branch
~~~~~~~~~~~~~~~~~~~~~~~~~

**THIS STEP SHOULD NOT BE REQUIRED FOR ANY ADDITIONS TO DOCUMENTATION BUT A DESCRIPTION IS PROVIDED 
IN THE INTEREST OF TRANSPARENCY AND REPRODUCIBILITY FOR THE BENEFIT OF USERS AND THE COMMUNITY**

An orphan branch is a branch that has no history in common with the master repository off of which it was 
forked. For the CICE-Consortium, the purpose for this is that the HTML pages created by Sphinx will exist 
in the orphan branch while the source RST code used to create the HTML exists in the master repository. 
This way changes to the RST go into the evolving repository, but changes to the HTML are isolated to the 
orphan branch. This method avoids conflicts related to the HTML that aren’t always caught by GitHub merges 
and could cause the documentation to break.

Steps to create orphan branch:

1. On GitHub website create personal fork of the repo you’re interested in

2. On GitHub website from your fork, get link for the repository

3. On your local machine execute the following commands:
  
   Clone the original repository. ::

   $ git clone URL

   List all the branches of the repository. ::

   $ git branch --l

   Create the orphan branch gh-pages from the master branch. The branch should initially have all 
   documents from the master. ::

   $ git checkout --orphan gh-pages 

   Add the URL for the original repository as your “upstream” repository. Get this from Github website. ::

   $ git remote add upstream URL 

   Remove  everything in this repository. i.e. we are making it so their histories diverge. :: 

   $ git rm -rf .  

   Check if all the files are gone. ::

   $ git status .   

   Commit the change to make gh-pages branch. ::

   $ git commit -m “Initial commit to create gh-pages branch of repo”

   Provide a list of remote repositories and links. Should show your personal fork as “origin” and 
   the original repository as "upstream". ::

   $ git remote --v 

   Add the orphan branch, named gh-pages, to your local fork but not the original repo from which you forked. ::

   $ git push origin gh-pages

4. Once you've created the gh-pages branch on your personal fork do a pull request to incorporate the new branch 
   into the master repository. This way someone else will review what you've done and make sure you don't delete 
   an entire repository by accident. It is possible to push the gh-pages branch upstream if you have owner status; 
   **be very careful if you do this.**

5. For a new orphan branch, set up sphinx stuff by executing the following commands: 

   Go to doc directory. ::

   $ cd doc

   Make a source directory. ::

   $ mkdir source

   Initiate sphinx interactive session to create a conf.py file. Note that the conf.py file can be changed later on. ::

   $ sphinx-quickstart

   Answer the prompts

   Set GitHub to ignore HTML and Emacs back up files during commits, pushes, and pull requests. ::

   $ cp .gitignore from CICE-Consortium CICE or Icepack master repository

   Add the two new files (conf.py, .gitignore). ::

   $ git add .

   Commit the changes. ::

   $ git commit -m “Initial setup for Sphinx documentation”

6. Do a pull request to add these to the master repository.



